#include <Arduino.h>

int trigPin = 7;
int echoPin = 8;
int i = 0;
float n = 10.;
float sum = 0.;
float avr = 0.;
float duration, distance;
float temp[10];
float temp2[10];
float temp3[10];
float stdV;
float tsus[11];
float prob[10];
float Ptsus[11];
int v;
int y;
int z;
float avrPanjangA;
float stdVPanjangA;
float avrPanjangB;
float stdVPanjangB;
float KalmanFilterData;
float Xt, Xt_update, Xt_prev;
float Pt, Pt_update, Pt_prev;
float Kt, R, Q;
float sensorData;


const float x[50][10]={{0.00,0.80,1.60,2.39,3.19,3.99,4.78,5.58,6.38,7.17},
                       {7.97,8.76,9.55,10.34,11.13,11.92,12.71,13.50,14.28,15.07},
                       {15.85,16.63,17.41,18.19,18.97,19.74,20.51,21.28,22.05,22.82},
                       {23.58,24.42,25.10,25.86,26.61,27.37,28.12,28.86,29.61,30.35},
                       {31.08,31.82,32.55,33.28,34.01,34.73,35.45,36.16,36.88,37.59},
                       {38.29,38.99,39.69,40.39,41.08,41.77,42.45,43.13,43.81,44.48},
                       {45.15,45.81,46.47,47.13,47.78,48.43,49.07,49.71,50.35,50.98},
                       {51.61,52.23,52.85,53.46,54.07,54.67,55.27,55.87,56.46,57.05},
                       {57.63,58.21,58.78,59.35,59.91,60.47,61.02,61.57,62.11,62.65},
                       {63.19,63.72,64.24,64.76,65.28,65.79,66.29,66.80,67.29,67.78},
                       {68.27,68.75,69.23,69.70,70.17,70.63,71.09,71.54,71.99,72.43},
                       {72.87,73.30,73.73,74.15,74.57,74.99,75.40,75.80,76.20,76.60},
                       {76.99,77.37,77.57,78.13,78.50,78.87,79.23,79.59,79.95,80.29},
                       {80.64,80.98,81.32,81.65,81.98,82.30,82.62,82.93,83.24,83.55},
                       {83.85,84.15,84.44,84.73,85.01,85.29,85.27,85.84,86.11,86.38},
                       {86.64,86.90,87.15,87.40,87.64,87.89,88.12,88.36,88.59,88.82},
                       {89.04,89.26,89.48,89.69,89.90,90.11,90.31,90.51,90.70,90.90},
                       {91.09,91.27,91.46,91.64,91.81,91.99,92.16,92.33,92.49,92.65},
                       {92.81,92.97,93.12,93.28,93.42,93.57,93.71,93.85,93.99,94.12},
                       {94.26,94.39,94.51,94.64,94.76,94.88,95.00,95.12,95.23,95.34},
                       {95.45,95.56,95.66,95.76,95.86,95.96,96.06,96.15,96.25,96.34},
                       {96.43,96.51,96.60,96.68,96.76,96.84,96.92,97.00,97.07,97.15},
                       {97.22,97.29,97.36,97.43,97.49,97.56,97.62,97.68,97.74,97.80},
                       {97.86,97.91,97.97,98.02,98.07,98.12,98.17,98.22,98.27,98.32},
                       {98.36,98.40,98.45,98.49,98.53,98.57,98.61,98.65,98.69,98.72},
                       {98.76,98.79,98.83,98.86,98.89,98.92,98.95,98.98,99.01,99.04},
                       {99.07,99.09,99.12,99.15,99.17,99.21,99.22,99.24,99.26,99.29},
                       {99.31,99.33,99.35,99.37,99.39,99.40,99.42,99.44,99.47,99.47},
                       {99.49,99.50,99.52,99.53,99.55,99.56,99.58,99.59,99.60,99.61},
                       {99.63,99.64,99.65,99.66,99.67,99.68,99.69,99.70,99.71,99.72},
                       {99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79},
                       {99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79},
                       {99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79},
                       {99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79},
                       {99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79,99.79},
                       {99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95},
                       {99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95},
                       {99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95},
                       {99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95},
                       {99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95,99.95},
                       {99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994},
                       {99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994},
                       {99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994},
                       {99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994},
                       {99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994,99.994},
                       {99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993},
                       {99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993},
                       {99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993},
                       {99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993,99.9993},
                       {99.99994,99.99994,99.99994,99.99994,99.99994,99.99994,99.99994,99.99994,99.99994,99.99994}};


void setup() 
{
  Serial.begin (9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  // R = 0.16;
  // Q = 0.163;
  // Pt_prev = 1;
}


void loop() 
{
  duration = pulseIn(echoPin, HIGH);

  //PENGKUKURAN A
  Serial.println("---------------------PENGUKURAN PANJANG A---------------------");
  while(i < 10){
    digitalWrite(trigPin, LOW);        
    delayMicroseconds(2);              
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);           
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
    distance = duration * 0.034 / 2;

    //Perhitungkan menggunakan kalman filter
    // sensorData = distance;
    // Xt_update = Xt_prev;
    // Pt_update = Pt_prev + Q;
    // Kt = Pt_update/(Pt_update + R);
    // Xt = Xt_update + (Kt * (sensorData - Xt_update));
    // Pt = (1-Kt) * Pt_update;

    // Xt_prev = Xt;
    // Pt_prev = Pt;
    // KalmanFilterData = Xt;
    temp[i]= distance;
    Serial.print("Pengukuran ");
    Serial.print(i+1);
    Serial.print(" : ");
    if (distance >= 1000 || distance <= 0){
      Serial.println("Out of range");
    }else {
      Serial.print(distance);
      Serial.println(" cm");
    }
    delay(1000);
    i++;
    sum += distance;
  }
  Serial.println();
  Serial.print("Total angka: ");
  Serial.println(sum);
  
  avr = sum/n;
  Serial.print("Rata-rata: ");
  Serial.println(avr);
  
  Serial.println();
  
  Serial.println("(x-rata2)^2");
  for(int k = 0; k<10; k++){
    temp2[k] = pow((temp[k] - avr),2);
    Serial.println(temp2[k]);
    stdV += temp2[k];
  }
  stdV = sqrt(stdV/10);
  
  Serial.println();
  
  Serial.print("Standard Deviasi: ");
  Serial.println(stdV);
  
  Serial.println("tsus: ");
  for(int l = 0; l < 10; l++){
    tsus[l] = abs(temp[l]-avr)/stdV;
    Serial.println(tsus[l]);
  }
  
  Serial.println();
  
  Serial.println("Percentage Prob(tsus)");
  for(int i = 0; i <10; i++){
    v = tsus[i]*100.0;
    y = v%10;
    z = v/10;   
    Ptsus[i] = x[z][y];
    Serial.println(x[z][y]);
  }
  Serial.println();
  Serial.println("1-tsus");
  for(int i = 0; i <10; i++){
    Ptsus[i] = (1-Ptsus[i]/100)*10;
    Serial.println(Ptsus[i]);
  }

  Serial.println();

  //DATA REJECTION
  Serial.println("DATA REJECTION");
  v = 0;
  avr = 0;
  stdV=0;
  for(int i = 0; i <10; i++){
    if(Ptsus[i]<0.5){
      Serial.print(temp[i]);
      Serial.println(" adalah data yang harus direject");
    }
    else{
      avr+= temp[i];
      temp3[v] = temp[i];
      v++;
    }
  }

  Serial.println();
  avr /= v;
  avrPanjangA = avr;
  for(int k = 0; k < v; k ++){
    temp3[k] = pow((temp[k] - avr),2);
    stdV += temp3[k];
  }
  stdV = sqrt(stdV/10);
  stdVPanjangA = stdV;
  Serial.print("Nilai terbaik pengukuran A : ");
  Serial.print(avrPanjangA);
  Serial.print(" plus_minus ");
  Serial.println(stdVPanjangA);

  delay(1000);

//PENGUKURAN B
  Serial.println("---------------------PENGUKURAN PANJANG B---------------------");
  i = 0;
  sum = 0;
  v = 0;
  avr = 0;
  stdV = 0;
  while(i < 10){
    digitalWrite(trigPin, LOW);        
    delayMicroseconds(2);              
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);           
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
    distance = duration * 0.034 / 2;
    // //Perhitungkan menggunakan kalman filter
    // sensorData = distance;
    // Xt_update = Xt_prev;
    // Pt_update = Pt_prev + Q;
    // Kt = Pt_update/(Pt_update + R);
    // Xt = Xt_update + (Kt * (sensorData - Xt_update));
    // Pt = (1-Kt) * Pt_update;

    // Xt_prev = Xt;
    // Pt_prev = Pt;
    // KalmanFilterData = Xt;
    temp[i]=distance;

    Serial.print("Pengukuran ");
    Serial.print(i+1);
    Serial.print(" : ");
    if (distance >= 1000 || distance <= 0){
      Serial.println("Out of range");
    }else {
      Serial.print(distance);
      Serial.println(" cm");
    }
    delay(1000);
      i++;
      sum += distance;
  }
  
  Serial.println();
  
  Serial.print("Total angka: ");
  Serial.println(sum);
  
  avr = sum/n;
  Serial.print("Rata-rata: ");
  Serial.println(avr);
  
  Serial.println();
  
  Serial.println("(x-rata2)^2");
  for(int k = 0; k<10; k++){
    temp2[k] = pow((temp[k] - avr),2);
    Serial.println(temp2[k]);
    stdV += temp2[k];
  }
  stdV = sqrt(stdV/10);
  
  Serial.println();
  
  Serial.print("Standard Deviasi: ");
  Serial.println(stdV);
  
  Serial.println("tsus: ");
  for(int l = 0; l < 10; l++){
    tsus[l] = abs(temp[l]-avr)/stdV;
    Serial.println(tsus[l]);
  }
  
  Serial.println();
  
  Serial.println("Percentage Prob(tsus)");
  for(int i = 0; i <10; i++){
    v = tsus[i]*100.0;
    y = v%10;
    z = v/10;
    Ptsus[i] = x[z][y];
    Serial.println(x[z][y]);
  }
  
  Serial.println();
  Serial.println("1-tsus");
  for(int i = 0; i <10; i++){
    Ptsus[i] = (1-Ptsus[i]/100)*10;
    Serial.println(Ptsus[i]);
  }

  //DATA REJECTION
  Serial.println("DATA REJECTION");
  v = 0;
  avr = 0;
  stdV = 0;
  for(int i = 0; i <10; i++){
    if(Ptsus[i]<0.5){
      Serial.print(temp[i]);
      Serial.println(" adalah data yang harus direject");
    }
    else{
      avr+= temp[i];
      temp3[v] = temp[i];
      v++;
    }
  }


  Serial.println();
  avr /= v;
  avrPanjangB = avr;
  for(int k = 0; k < v; k ++){
    temp2[k] = pow((temp[k] - avr),2);
    stdV += temp2[k];
  }
  stdV = sqrt(stdV/v);
  stdVPanjangB = stdV;
  Serial.print("Nilai terbaik pengukuran B : ");
  Serial.print(avrPanjangB);
  Serial.print(" plus_minus ");
  Serial.println(stdVPanjangB);


Serial.println("===========Pengukuran rata-rata terbobot===========");
float w1 = 1/pow(stdVPanjangA,2);
float w2 = 1/pow(stdVPanjangB,2);
float Rwav = (w1*avrPanjangA + w2*avrPanjangB)/(w1+w2);
float stdWav = 1/sqrt(w1+w2);

Serial.print("Nilai ralat Weight pengukuran panjang A : ");
Serial.println(w1);
Serial.print("Nilai ralat Weight pengukuran panjang B : ");
Serial.println(w2);

Serial.println();

//PENGKURAN AKHIR
Serial.println("----------------------------------------------------------------------------");

Serial.print("HASIL AKHIR : ");
Serial.print(Rwav);
Serial.print(" plus_minus ");
Serial.println(stdWav);

for(int i = 0; i < 60; i++){
  Serial.println();
}

  exit(0);
  
}

